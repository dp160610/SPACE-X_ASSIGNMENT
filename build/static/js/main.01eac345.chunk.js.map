{"version":3,"sources":["stores/index.js","stores/SpaceXStore/index.js","Components/ButtonComponent/styledComponents.js","Components/ButtonComponent/index.js","Components/SectionHeader/styledComponents.js","Components/SectionHeader/index.js","Components/Filters/styledComponents.js","Components/Filters/index.js","Components/MissionCard/styledComponents.js","Components/MissionCard/index.js","Components/MainComponent/styledComponents.js","Components/MainComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["storeInstance","action","bound","getLaunchValues","getYears","this","init","isSelectedYear","launchValue","landingValue","missionsList","currentURL","value","fetchData","response","url","isLaunchedSuccessfully","isLandedSuccessfully","getURL","fetch","res","json","setData","observable","Button","styled","button","props","isSelected","observer","onClick","onClickButton","text","HorizontalLine","hr","Title","span","Container","div","SectionHeader","title","Heading","h3","YearsContainer","Filters","stores","map","year","key","setSelectedYear","setLaunchValue","setLandingValue","Component","Image","img","MissionName","Label","ImageContainer","MissionIdList","ul","MissionId","li","LabelContainer","Value","getValueByItsType","renderLabels","label","src","mission","links","mission_patch","mission_name","flight_number","mission_id","length","id","launch_year","launch_success","rocket","first_stage","cores","land_success","h1","MissionsList","InfoContainer","Loader","Footer","FooterText","DeveloperName","MainComponent","renderMissionsList","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01eac345.chunk.js","sourcesContent":["import SpaceXStore from \"./SpaceXStore\";\n\nconst storeInstance = new SpaceXStore();\n\nexport default { storeInstance };\n","import { observable, action } from \"mobx\";\n\nclass SpaceXStore {\n  @observable isSelectedYear;\n  @observable launchValue;\n  @observable landingValue;\n  @observable missionsList;\n  @observable currentURL;\n  constructor() {\n    this.init();\n  }\n\n  init() {\n    this.isSelectedYear = \"\";\n    this.launchValue = \"\";\n    this.landingValue = \"\";\n    this.missionsList = null;\n    this.currentURL = \"\";\n  }\n\n  @action.bound\n  setSelectedYear(value) {\n    if (this.isSelectedYear !== value) {\n      this.isSelectedYear = value;\n    } else {\n      this.isSelectedYear = \"\";\n    }\n    this.fetchData();\n  }\n\n  @action.bound\n  setLaunchValue(value) {\n    if (this.launchValue !== value) {\n      this.launchValue = value;\n    } else {\n      this.launchValue = \"\";\n    }\n    this.fetchData();\n  }\n\n  @action.bound\n  setLandingValue(value) {\n    if (this.landingValue !== value) {\n      this.landingValue = value;\n    } else {\n      this.landingValue = \"\";\n    }\n    this.fetchData();\n  }\n\n  getLaunchValues = () => {\n    return [\"True\", \"False\"];\n  };\n\n  getYears = () => {\n    return [\n      2006,\n      2007,\n      2008,\n      2009,\n      2010,\n      2011,\n      2012,\n      2013,\n      2014,\n      2015,\n      2016,\n      2017,\n      2018,\n      2019,\n      2020,\n    ];\n  };\n\n  @action.bound\n  setData(response) {\n    this.missionsList = response;\n  }\n\n  @action.bound\n  getURL() {\n    let url = `https://api.spaceXdata.com/v3/launches?limit=100`;\n    if (this.launchValue) {\n      const isLaunchedSuccessfully = this.launchValue === \"True\" ? true : false;\n      url = url + `&launch_success=${isLaunchedSuccessfully}`;\n    }\n    if (this.landingValue) {\n      const isLandedSuccessfully = this.landingValue === \"True\" ? true : false;\n      url = url + `&land_success=${isLandedSuccessfully}`;\n    }\n    if (this.isSelectedYear) {\n      url = url + `&launch_year=${this.isSelectedYear}`;\n    }\n\n    return url;\n  }\n\n  async fetchData() {\n    const url = this.getURL();\n    if (url !== this.currentURL) {\n      this.missionsList = null;\n      this.currentURL = url;\n      const res = await fetch(url);\n      const response = await res.json();\n      this.setData(response);\n    }\n  }\n}\n\nexport default SpaceXStore;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px 18px;\n  border-radius: 4px;\n  background-color: ${(props) => (props.isSelected ? \"#54a806\" : \"#cbf5a3\")};\n  border: none;\n  box-sizing: border-box;\n  &:active {\n    border: none;\n  }\n  margin-bottom: 10px;\n  outline: none;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport { Button } from \"./styledComponents.js\";\n\nfunction ButtonComponent(props) {\n  return (\n    <Button\n      onClick={() => props.onClickButton(props.text)}\n      isSelected={props.isSelected}\n    >\n      {props.text}\n    </Button>\n  );\n}\n\nexport default observer(ButtonComponent);\n","import styled from \"styled-components\";\n\nexport const HorizontalLine = styled.hr`\n  width: 70%;\n`;\n\nexport const Title = styled.span``;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n","import React from \"react\";\n\nimport { Title, HorizontalLine, Container } from \"./styledComponents.js\";\n\nfunction SectionHeader(props) {\n  return (\n    <Container>\n      <Title>{props.title}</Title>\n      <HorizontalLine></HorizontalLine>\n    </Container>\n  );\n}\n\nexport default SectionHeader;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  width: 210px;\n  max-height: 650px;\n  flex-wrap: wrap;\n  align-items: center;\n  flex-direction: column;\n  background-color: white;\n  padding: 20px;\n  padding-bottom: 20px;\n  box-sizing: border-box;\n  border-radius: 7px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const Heading = styled.h3`\n  margin: 0px;\n  align-self: flex-start;\n`;\n\nexport const YearsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport stores from \"../../stores\";\n\nimport ButtonComponent from \"../ButtonComponent\";\nimport SectionHeader from \"../SectionHeader\";\n\nimport { Container, Heading, YearsContainer } from \"./styledComponents.js\";\n\n@observer\nclass Filters extends Component {\n  render() {\n    return (\n      <Container>\n        <Heading>{\"Filters\"}</Heading>\n        <SectionHeader title={\"Launch Year\"} />\n        <YearsContainer>\n          {stores.storeInstance.getYears().map((year) => (\n            <ButtonComponent\n              key={year}\n              text={year}\n              onClickButton={(value) => {\n                stores.storeInstance.setSelectedYear(value);\n              }}\n              isSelected={stores.storeInstance.isSelectedYear === year}\n            />\n          ))}\n        </YearsContainer>\n        <SectionHeader title={\"Successful Launch\"} />\n        <YearsContainer>\n          {stores.storeInstance.getLaunchValues().map((value) => (\n            <ButtonComponent\n              key={value}\n              text={value}\n              onClickButton={(value) => {\n                stores.storeInstance.setLaunchValue(value);\n              }}\n              isSelected={stores.storeInstance.launchValue === value}\n            />\n          ))}\n        </YearsContainer>\n        <SectionHeader title={\"Successful Landing\"} />\n        <YearsContainer>\n          {stores.storeInstance.getLaunchValues().map((value) => (\n            <ButtonComponent\n              key={\"launch\" + value}\n              text={value}\n              onClickButton={(value) => {\n                stores.storeInstance.setLandingValue(value);\n              }}\n              isSelected={stores.storeInstance.landingValue === value}\n            />\n          ))}\n        </YearsContainer>\n      </Container>\n    );\n  }\n}\n\nexport default Filters;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  width: 210px;\n  flex-wrap: wrap;\n  background-color: white;\n  padding: 20px;\n  padding-bottom: 20px;\n  box-sizing: border-box;\n  border-radius: 7px;\n  margin-bottom: 20px;\n  max-height: 430px;\n  flex-direction: column;\n  @media (min-width: 1024px) and (max-width: 1200px) {\n    width: 188px;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 160px;\n  height: 160px;\n  @media (min-width: 1024px) and (max-width: 1200px) {\n    width: 140px;\n    height: 140px;\n  }\n`;\n\nexport const MissionName = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: blue;\n`;\n\nexport const Label = styled.span``;\n\nexport const ImageContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: lightgrey;\n  border-radius: 3px;\n`;\n\nexport const MissionIdList = styled.ul`\n  margin-top: 5px;\n  margin-bottom: 0px;\n`;\n\nexport const MissionId = styled.li``;\n\nexport const LabelContainer = styled.div`\n  margin-top: 10px;\n`;\n\nexport const Value = styled.span`\n  color: rgb(9, 103, 210);\n`;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport {\n  Container,\n  ImageContainer,\n  Image,\n  Label,\n  MissionName,\n  LabelContainer,\n  Value,\n  MissionIdList,\n  MissionId,\n} from \"./styledComponents.js\";\n\nconst getValueByItsType = (value) => {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (typeof value === \"boolean\") {\n    if (value) {\n      return \"Yes\";\n    }\n    return \"No\";\n  }\n};\n\nconst renderLabels = (label, value) => (\n  <LabelContainer>\n    <Label>{label}</Label>\n    <Value>{getValueByItsType(value) ? getValueByItsType(value) : `NA`}</Value>\n  </LabelContainer>\n);\n\nfunction MissionCard(props) {\n  return (\n    <Container>\n      <ImageContainer>\n        <Image src={props.mission.links.mission_patch} />\n      </ImageContainer>\n      <MissionName>{`${props.mission.mission_name} #${props.mission.flight_number}`}</MissionName>\n      <Label>{`Mission Ids : `}</Label>\n      <MissionIdList>\n        {props.mission.mission_id.length > 0 ? (\n          props.mission.mission_id.map((id) => (\n            <MissionId key={id}>{id}</MissionId>\n          ))\n        ) : (\n          <Value>{`NA`}</Value>\n        )}\n      </MissionIdList>\n      {renderLabels(`Launch Year: `, props.mission.launch_year)}\n      {renderLabels(`Successful Launch : `, props.mission.launch_success)}\n      {renderLabels(\n        `Successful Landing : `,\n        props.mission.rocket.first_stage.cores[0].land_success\n      )}\n    </Container>\n  );\n}\n\nexport default observer(MissionCard);\n","import styled from \"styled-components\";\n\nexport const Heading = styled.h1`\n  margin-top: 0px;\n  margin-left: 20px;\n  @media (min-width: 1023px) and (max-width: 1500px) {\n    margin-left: 170px;\n  }\n`;\n\nexport const Container = styled.div`\n  background-color: lightgrey;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const MissionsList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 10px;\n  @media (min-width: 700px) and (max-width: 1023px) {\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (max-width: 700px) {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n  }\n`;\n\nexport const InfoContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 10px;\n  box-sizing: border-box;\n  margin: auto;\n  flex-direction: row;\n  max-width: 1440px;\n  @media (max-width: 700px) {\n    flex-direction: column;\n    align-items: center;\n  }\n  @media (min-width: 1440px) {\n    justify-content: center;\n  }\n`;\n\nexport const Loader = styled.div`\n  height: 100vh;\n  width: calc(100% - 230px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  @media (min-width: 1440px) {\n    width: 870px;\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-bottom: 20px;\n  @media (max-width: 700px) {\n    flex-direction: column;\n  }\n`;\n\nexport const FooterText = styled.span`\n  font-weight: bold;\n`;\n\nexport const DeveloperName = styled.span``;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\n\nimport stores from \"../../stores\";\n\nimport Filters from \"../Filters\";\nimport MissionCard from \"../MissionCard\";\n\nimport {\n  Heading,\n  Container,\n  MissionsList,\n  InfoContainer,\n  Loader,\n  Footer,\n  FooterText,\n  DeveloperName,\n} from \"./styledComponents.js\";\nimport \"./styles.css\";\n\n@observer\nclass MainComponent extends Component {\n  componentDidMount() {\n    stores.storeInstance.fetchData();\n  }\n\n  renderMissionsList = () => {\n    if (stores.storeInstance.missionsList.length > 0)\n      return (\n        <MissionsList>\n          {stores.storeInstance.missionsList.map((mission) => (\n            <MissionCard\n              mission={mission}\n              key={`${mission.mission_name}${mission.flight_number}`}\n            />\n          ))}\n        </MissionsList>\n      );\n    else return <Loader>{`No Items to Show`}</Loader>;\n  };\n\n  render() {\n    return (\n      <Container>\n        <Heading>{`SpaceX Launch Programs`}</Heading>\n        <InfoContainer>\n          <Filters />\n          {!stores.storeInstance.missionsList ? (\n            <Loader>\n              <div className=\"loader\" />\n            </Loader>\n          ) : (\n            this.renderMissionsList()\n          )}\n        </InfoContainer>\n        <Footer>\n          <FooterText>{`Developed by: `}</FooterText>\n          <DeveloperName>{`Durga Prasad Chintala`}</DeveloperName>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport MainComponent from \"./Components/MainComponent\";\nimport { observer } from \"mobx-react\";\n\nfunction App() {\n  return <MainComponent />;\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}